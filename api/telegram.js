// api/telegram.js ‚Äî Q1 (consent) + Q2 (name) —Å –∞–Ω—Ç–∏-–¥—É–±–ª—è–º–∏ –Ω–∞ Upstash Redis.
// –ú–∏–Ω–∏–º—É–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch (Node 20 –Ω–∞ Vercel).

const TOKEN       = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_ID    = process.env.ADMIN_CHAT_ID || "";
const START_SECRET= process.env.START_SECRET || "INVITE";
const REDIS_BASE  = (process.env.UPSTASH_REDIS_REST_URL || "").replace(/\/$/,"");
const REDIS_TOKEN = process.env.UPSTASH_REDIS_REST_TOKEN || "";

const NO_CHAT = "–Ø –Ω–µ –≤–µ–¥—É –ø–µ—Ä–µ–ø–∏—Å–∫—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üôå";

/* ---------- Redis helpers (REST) ---------- */
async function r(path, qs) {
  const url = new URL(REDIS_BASE + path);
  if (qs) Object.entries(qs).forEach(([k,v])=> url.searchParams.set(k, String(v)));
  const res = await fetch(url, { headers: { Authorization: `Bearer ${REDIS_TOKEN}` }});
  return res.json();
}
const rGet  = (k)=> r(`/get/${encodeURIComponent(k)}`);
const rDel  = (k)=> r(`/del/${encodeURIComponent(k)}`);
const rSet  = (k,v,opts={})=> r(`/set/${encodeURIComponent(k)}/${encodeURIComponent(v)}`, opts);
const rIncr = async (k, ex=60)=>{ const j=await r(`/incr/${encodeURIComponent(k)}`); if(j.result===1) await r(`/expire/${encodeURIComponent(k)}/${ex}`); return j.result; };

async function seenUpdate(id){ const j = await rSet(`upd:${id}`, "1", { EX:180, NX:true }); return j.result==="OK"; }  // true => –ø–µ—Ä–≤—ã–π —Ä–∞–∑
async function renderOnce(uid, stage, ttl=300){ const j = await rSet(`rend:${uid}:${stage}`, "1", { EX:ttl, NX:true }); return j.result==="OK"; }
async function overRL(uid, limit=12){ return (await rIncr(`rl:${uid}`, 60)) > limit; }
async function getSess(uid){
  const j = await rGet(`sess:${uid}`); if(!j?.result) return { step:"consent", consent:"", name:"" };
  try { return JSON.parse(j.result); } catch { return { step:"consent", consent:"", name:"" }; }
}
async function putSess(uid,s){ await rSet(`sess:${uid}`, JSON.stringify(s), { EX:21600 }); }
async function delSess(uid){ await rDel(`sess:${uid}`); }

/* ---------- Telegram API ---------- */
async function tg(method, payload){
  const url = `https://api.telegram.org/bot${TOKEN}/${method}`;
  const res = await fetch(url, { method:"POST", headers:{ "content-type":"application/json" }, body: JSON.stringify(payload) });
  return res.json();
}
const kb = (obj)=> JSON.stringify(obj);
const consentKb = ()=> kb({ inline_keyboard: [[
  { text:"‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ —Å–≤—è–∑—å", callback_data:"consent_yes" },
  { text:"‚ùå –ù–µ —Å–µ–π—á–∞—Å",        callback_data:"consent_no"  }
]]});

/* ---------- Body parsing ---------- */
async function readBody(req){
  if (req.body) {
    try { return typeof req.body === "string" ? JSON.parse(req.body) : req.body; } catch {}
  }
  let raw=""; for await (const ch of req) raw += Buffer.isBuffer(ch)? ch.toString("utf8"): String(ch);
  try { return JSON.parse(raw||"{}"); } catch { return {}; }
}

/* ---------- One-time screens ---------- */
async function sendWelcome(chat, uid){
  if (!(await renderOnce(uid,"welcome"))) return;
  await tg("sendMessage", {
    chat_id: chat,
    text: "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–±–æ—Ä ¬´—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤¬ª (SQL + Graph + Vector).\n–°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –æ—Ç–≤–µ—Ç—ã: –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Å—Ç–µ–∫, —Å—Ç–∏–ª—å, –≤—Ä–µ–º—è. –û–∫?",
    parse_mode: "HTML",
    reply_markup: consentKb()
  });
}
async function sendNamePrompt(chat, uid, username){
  if (!(await renderOnce(uid,"name"))) return;
  const btn = username ? { text:`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @${username}`, callback_data:"name_use_username" } : null;
  const rm = btn ? { inline_keyboard: [[btn]] } : undefined;
  await tg("sendMessage", {
    chat_id: chat,
    text: "2) –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –í–≤–µ–¥–∏ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º" + (username?` –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @${username}¬ª.`:""),
    parse_mode: "HTML",
    reply_markup: rm ? JSON.stringify(rm) : undefined
  });
}

/* ---------- HTTP entry ---------- */
export default async function handler(req, res){
  if (req.method !== "POST") { res.status(200).send("OK"); return; }
  const upd = await readBody(req);
  try { console.log("HOOK:", JSON.stringify({ id: upd.update_id, msg: !!upd.message, cb: !!upd.callback_query })); } catch {}
  try {
    if (upd.update_id && !(await seenUpdate(upd.update_id))) { res.status(200).send("OK"); return; }
    if (upd.message)             await onMessage(upd.message);
    else if (upd.callback_query) await onCallback(upd.callback_query);
  } catch(e){ console.error("ERR:", e?.stack || e?.message || String(e)); }
  res.status(200).send("OK");
}

/* ---------- Handlers ---------- */
async function onMessage(m){
  const uid  = m.from.id;
  if (await overRL(uid)) return;

  const chat = m.chat.id;
  const text = (m.text || "").trim();
  try { console.log("onMessage:", { uid, text }); } catch {}

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  if (text.toLowerCase() === "/ping") {
    await tg("sendMessage", { chat_id: chat, text: "pong ‚úÖ" });
    return;
  }

  if (text.startsWith("/start")) {
    // –†–ê–ù–¨–®–ï: —Ç—Ä–µ–±–æ–≤–∞–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π payload `INVITE`.
    // –°–ï–ô–ß–ê–°: –µ—Å–ª–∏ payload –µ—Å—Ç—å –∏ –æ–Ω –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ä–µ—Ç ‚Äî –æ—Ç–∫–ª–æ–Ω—è–µ–º.
    // –ï—Å–ª–∏ payload –ø—É—Å—Ç–æ–π ‚Äî –ü–†–û–ü–£–°–ö–ê–ï–ú (–≤—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Å—Ç–æ–ø–æ—Ä–∏—Ç—å—Å—è).
    const payload = text.split(" ").slice(1).join(" ").trim();
    if (payload && START_SECRET && !payload.includes(START_SECRET) && String(uid) !== String(ADMIN_ID)) {
      await tg("sendMessage", { chat_id: chat, text: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ—Å–∏ —Å–≤–µ–∂—É—é —Å—Å—ã–ª–∫—É —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞." });
      return;
    }

    const s = await getSess(uid);
    if (s.step && s.step !== "consent") {
      await tg("sendMessage", { chat_id: chat, text: "–ê–Ω–∫–µ—Ç–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º ‚¨áÔ∏è" });
      if (s.step === "name") await sendNamePrompt(chat, uid, m.from.username);
      return;
    }

    await delSess(uid);
    await putSess(uid, { step: "consent", consent: "", name: "" });
    await sendWelcome(chat, uid);  // –≠–∫—Ä–∞–Ω ¬´–°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ —Å–≤—è–∑—å¬ª
    return;
  }

  // –¢–µ–∫—Å—Ç –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —à–∞–≥–µ name
  const s = await getSess(uid);
  if (s.step === "name") {
    s.name = text.slice(0, 80);
    s.step = "hold";
    await putSess(uid, s);
    await tg("sendMessage", { chat_id: chat, text: `‚úÖ –û–∫, ${s.name}. –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–æ–±–∞–≤–∏–º –¥–∞–ª–µ–µ.` });
    return;
  }

  await tg("sendMessage", { chat_id: chat, text: NO_CHAT });
}


async function onCallback(q){
  const uid = q.from.id; if (await overRL(uid)) return;
  const chat = q.message.chat.id; const mid = q.message.message_id;
  const data = q.data || ""; await tg("answerCallbackQuery", { callback_query_id: q.id });

  let s = await getSess(uid);

  if (data === "consent_yes"){
    if (s.step !== "consent") return;             // –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —à–∞–≥–∞
    s.consent = "yes"; s.step = "name"; await putSess(uid, s);
    await tg("editMessageText", { chat_id: chat, message_id: mid, text: "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Å–≤—è–∑—å.", parse_mode:"HTML" });
    await sendNamePrompt(chat, uid, q.from.username);
    return;
  }
  if (data === "consent_no"){
    if (s.step !== "consent") return;
    await tg("editMessageText", { chat_id: chat, message_id: mid, text: "–û–∫. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî /start" });
    await delSess(uid); return;
  }

  if (data === "name_use_username"){
    if (s.step !== "name") return;
    s.name = q.from.username ? `@${q.from.username}` : String(uid);
    s.step = "hold"; await putSess(uid, s);
    await tg("sendMessage", { chat_id: chat, text: `‚úÖ –û–∫, ${s.name}. –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–æ–±–∞–≤–∏–º –¥–∞–ª–µ–µ.` });
    return;
  }
}
