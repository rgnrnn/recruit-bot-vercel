/**
 * api/telegram.js ‚Äî Vercel webhook –¥–ª—è Telegram (Node 20, ESM)
 * Q1 (—Å–æ–≥–ª–∞—Å–∏–µ) ‚Üí Q2 (–∏–º—è). –ê–Ω—Ç–∏-–¥—É–±–ª–∏ —á–µ—Ä–µ–∑ Upstash Redis.
 *
 * ENV (Vercel ‚Üí Project ‚Üí Settings ‚Üí Environment Variables):
 * TELEGRAM_BOT_TOKEN        ‚Äî —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
 * ADMIN_CHAT_ID             ‚Äî id –∞–¥–º–∏–Ω–∞ (–æ–ø—Ü.)
 * START_SECRET              ‚Äî deep-link —Å–µ–∫—Ä–µ—Ç (–Ω–∞–ø—Ä. INVITE)
 * REQUIRE_SECRET            ‚Äî "1" –∏–ª–∏ "true" —á—Ç–æ–±—ã —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç —Å—Ç—Ä–æ–≥–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï —Ç—Ä–µ–±—É–µ–º)
 * UPSTASH_REDIS_REST_URL    ‚Äî https://*.upstash.io
 * UPSTASH_REDIS_REST_TOKEN  ‚Äî <token>
 */

const TOKEN        = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_ID     = process.env.ADMIN_CHAT_ID || "";
const START_SECRET = process.env.START_SECRET || "";
const REQUIRE_SEC  = /^1|true$/i.test(process.env.REQUIRE_SECRET || "");
const REDIS_BASE   = (process.env.UPSTASH_REDIS_REST_URL || "").replace(/\/$/, "");
const REDIS_TOKEN  = process.env.UPSTASH_REDIS_REST_TOKEN || "";

const NO_CHAT = "–Ø –Ω–µ –≤–µ–¥—É –ø–µ—Ä–µ–ø–∏—Å–∫—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üôå";

/* -------------------- Redis (Upstash REST) -------------------- */

function rUrl(path) {
  if (!REDIS_BASE || !REDIS_TOKEN) throw new Error("Redis env missing");
  return new URL(REDIS_BASE + path);
}
async function rGET(path) {
  const res = await fetch(rUrl(path), { headers: { Authorization: `Bearer ${REDIS_TOKEN}` } });
  return res.json();
}
async function rCall(path, qs = {}) {
  const url = rUrl(path);
  Object.entries(qs).forEach(([k, v]) => url.searchParams.set(k, String(v)));
  const res = await fetch(url, { headers: { Authorization: `Bearer ${REDIS_TOKEN}` } });
  return res.json();
}
const rSet  = (k, v, qs)=> rCall(`/set/${encodeURIComponent(k)}/${encodeURIComponent(v)}`, qs);
const rGet  = (k)=> rGET(`/get/${encodeURIComponent(k)}`);
const rDel  = (k)=> rGET(`/del/${encodeURIComponent(k)}`);
const rIncr = async (k, ex = 60) => {
  const j = await rGET(`/incr/${encodeURIComponent(k)}`);
  if (j.result === 1) await rGET(`/expire/${encodeURIComponent(k)}/${ex}`);
  return j.result;
};

/** –î–µ–¥—É–ø: true = –ø–µ—Ä–≤—ã–π —Ä–∞–∑; false = —è–≤–Ω—ã–π –¥—É–±–ª—å —ç—Ç–æ–≥–æ update_id.
 * –í–ê–ñ–ù–û: –ø—Ä–∏ –ª—é–±—ã—Ö –æ—à–∏–±–∫–∞—Ö/–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true (–ù–ï –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–ø–¥–µ–π—Ç). */
async function seenUpdate(update_id) {
  try {
    const j = await rSet(`upd:${update_id}`, "1", { EX: 180, NX: true });
    // Upstash: {result:"OK"} ‚Äî –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω; {result:null} ‚Äî —É–∂–µ –±—ã–ª (–¥—É–±–ª—å).
    if (j && Object.prototype.hasOwnProperty.call(j, "result")) {
      return j.result === "OK";           // true ‚Äî –ø–µ—Ä–≤—ã–π —Ä–∞–∑, false ‚Äî –¥—É–±–ª—å
    }
    return true;                           // —Å—Ç—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –ª—É—á—à–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, —á–µ–º –æ—Ç–±—Ä–æ—Å–∏—Ç—å
  } catch (e) {
    console.warn("seenUpdate fallback (redis err):", e?.message || String(e));
    return true;                           // –ø—Ä–∏ –æ—à–∏–±–∫–µ Redis ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –∞–ø–¥–µ–π—Ç—ã
  }
}
async function overRL(uid, limit = 12) {
  try { return (await rIncr(`rl:${uid}`, 60)) > limit; }
  catch { return false; }
}
async function getSess(uid) {
  try {
    const j = await rGet(`sess:${uid}`);
    if (!j?.result) return { step:"consent", consent:"", name:"" };
    try { return JSON.parse(j.result); } catch { return { step:"consent", consent:"", name:"" }; }
  } catch { return { step:"consent", consent:"", name:"" }; }
}
async function putSess(uid, s) { try { await rSet(`sess:${uid}`, JSON.stringify(s), { EX: 21600 }); } catch {} }
async function delSess(uid)     { try { await rDel(`sess:${uid}`); } catch {} }

/* -------------------- Telegram API -------------------- */

async function tg(method, payload) {
  const url = `https://api.telegram.org/bot${TOKEN}/${method}`;
  let json;
  try {
    const res = await fetch(url, {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify(payload),
    });
    json = await res.json();
  } catch (e) {
    console.error("tg network error:", method, e?.message || String(e));
    return { ok: false, error: "network" };
  }
  if (!json?.ok) {
    console.error("tg api error:", method, JSON.stringify(json).slice(0, 500));
  }
  return json;
}

/* -------------------- Body parsing -------------------- */

async function readBody(req) {
  // Vercel –º–æ–∂–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å body –æ–±—ä–µ–∫—Ç–æ–º, —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –ø–æ—Ç–æ–∫–æ–º
  if (req.body) {
    try { return typeof req.body === "string" ? JSON.parse(req.body) : req.body; }
    catch { /* fallthrough */ }
  }
  let raw = "";
  for await (const chunk of req) raw += Buffer.isBuffer(chunk) ? chunk.toString("utf8") : String(chunk);
  try { return JSON.parse(raw || "{}"); } catch { return {}; }
}

/* -------------------- UI helpers -------------------- */

function consentKeyboard() {
  return JSON.stringify({
    inline_keyboard: [[
      { text:"‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ —Å–≤—è–∑—å", callback_data:"consent_yes" },
      { text:"‚ùå –ù–µ —Å–µ–π—á–∞—Å",        callback_data:"consent_no"  }
    ]]
  });
}
async function sendWelcome(chat, uid) {
  console.log("sendWelcome", { uid, chat });
  await tg("sendMessage", {
    chat_id: chat,
    text: "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–±–æ—Ä ¬´—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤¬ª (SQL + Graph + Vector).\n–°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –æ—Ç–≤–µ—Ç—ã: –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Å—Ç–µ–∫, —Å—Ç–∏–ª—å, –≤—Ä–µ–º—è. –û–∫?",
    parse_mode: "HTML",
    reply_markup: consentKeyboard(),
  });
}
async function sendNamePrompt(chat, uid, username) {
  console.log("sendNamePrompt", { uid, chat, username });
  const btn = username ? { text:`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @${username}`, callback_data:"name_use_username" } : null;
  const rm  = btn ? JSON.stringify({ inline_keyboard: [[btn]] }) : undefined;
  await tg("sendMessage", {
    chat_id: chat,
    text: "2) –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –í–≤–µ–¥–∏ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º" + (username?` –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @${username}¬ª.`:""),
    parse_mode: "HTML",
    reply_markup: rm,
  });
}

/* -------------------- HTTP entry (Vercel) -------------------- */

export default async function handler(req, res) {
  if (req.method !== "POST") { res.status(200).send("OK"); return; }
  const upd = await readBody(req);

  try { console.log("HOOK:", JSON.stringify({ id: upd.update_id, msg: !!upd.message, cb: !!upd.callback_query })); } catch {}

  try {
    // –ê–Ω—Ç–∏-–¥—É–±–ª–∏ –ø–æ update_id (–Ω–æ –ù–ï –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö Redis)
    if (upd.update_id && !(await seenUpdate(upd.update_id))) {
      res.status(200).send("OK"); return;
    }
    if (upd.message)             await onMessage(upd.message);
    else if (upd.callback_query) await onCallback(upd.callback_query);
  } catch (e) {
    console.error("handler error:", e?.stack || e?.message || String(e));
  }
  res.status(200).send("OK");
}

/* -------------------- Handlers -------------------- */

async function onMessage(m) {
  const uid  = m.from.id;
  if (await overRL(uid)) return;

  const chat = m.chat.id;
  const text = (m.text || "").trim();
  try { console.log("onMessage:", { uid, text }); } catch {}

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  if (text.toLowerCase() === "/ping") { await tg("sendMessage", { chat_id: chat, text: "pong ‚úÖ" }); return; }

  if (text.startsWith("/start")) {
    // deep-link: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï —Ç—Ä–µ–±—É–µ–º —Å–µ–∫—Ä–µ—Ç, —á—Ç–æ–±—ã –Ω–µ —Å—Ç–æ–ø–æ—Ä–∏—Ç—å—Å—è
    const payload = text.split(" ").slice(1).join(" ").trim();
    const hasSecret = payload && START_SECRET && payload.includes(START_SECRET);
    if (REQUIRE_SEC && !hasSecret && String(uid) !== String(ADMIN_ID)) {
      await tg("sendMessage", { chat_id: chat, text: `–ù—É–∂–µ–Ω –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞. –û—Ç–∫—Ä–æ–π —Å—Å—ã–ª–∫—É:\nhttps://t.me/rgnr_assistant_bot?start=${encodeURIComponent(START_SECRET || "INVITE")}` });
      return;
    }

    const s = await getSess(uid);
    if (s.step && s.step !== "consent") {
      await tg("sendMessage", { chat_id: chat, text: "–ê–Ω–∫–µ—Ç–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º ‚¨áÔ∏è" });
      if (s.step === "name") await sendNamePrompt(chat, uid, m.from.username);
      return;
    }

    await delSess(uid);
    await putSess(uid, { step: "consent", consent: "", name: "" });
    await sendWelcome(chat, uid); // —ç–∫—Ä–∞–Ω —Å ¬´‚úÖ/‚ùå¬ª
    return;
  }

  // –¢–µ–∫—Å—Ç –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —à–∞–≥–µ "name"
  const s = await getSess(uid);
  if (s.step === "name") {
    s.name = text.slice(0, 80);
    s.step = "hold";
    await putSess(uid, s);
    await tg("sendMessage", { chat_id: chat, text: `‚úÖ –û–∫, ${s.name}. –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–æ–±–∞–≤–∏–º –¥–∞–ª–µ–µ.` });
    return;
  }

  await tg("sendMessage", { chat_id: chat, text: NO_CHAT });
}

async function onCallback(q) {
  const uid  = q.from.id;
  if (await overRL(uid)) return;

  const chat = q.message.chat.id;
  const mid  = q.message.message_id;
  const data = q.data || "";

  try { await tg("answerCallbackQuery", { callback_query_id: q.id }); } catch {}

  let s = await getSess(uid);

  if (data === "consent_yes") {
    if (s.step !== "consent") return; // –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —à–∞–≥–∞
    s.consent = "yes";
    s.step    = "name";
    await putSess(uid, s);
    await tg("editMessageText", { chat_id: chat, message_id: mid, text: "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Å–≤—è–∑—å.", parse_mode: "HTML" });
    await sendNamePrompt(chat, uid, q.from.username);
    return;
  }

  if (data === "consent_no") {
    if (s.step !== "consent") return;
    await tg("editMessageText", { chat_id: chat, message_id: mid, text: "–û–∫. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî /start" });
    await delSess(uid);
    return;
  }

  if (data === "name_use_username") {
    if (s.step !== "name") return;
    s.name = q.from.username ? `@${q.from.username}` : String(uid);
    s.step = "hold";
    await putSess(uid, s);
    await tg("sendMessage", { chat_id: chat, text: `‚úÖ –û–∫, ${s.name}. –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–æ–±–∞–≤–∏–º –¥–∞–ª–µ–µ.` });
    return;
  }

  // –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–≥–Ω–æ—Ä
}
