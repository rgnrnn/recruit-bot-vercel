// api/telegram.js ‚Äî Telegram webhook (Vercel, Node 20, ESM)
// –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫: Q1 consent -> Q2 name -> Q3 interests (multi) -> Q4 stack (multi)
// -> Q5 A1/A2/A3 -> Q6 about (text) -> Q7 time zone + windows + slots -> FINAL (LLM + Sheets)
// –í—Å—é–¥—É –µ—Å—Ç—å ¬´üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª –∏ –ø–∞–Ω–µ–ª—å ¬´‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å / üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.

const TOKEN        = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_ID     = process.env.ADMIN_CHAT_ID || "";
const START_SECRET = process.env.START_SECRET || "";
const REQUIRE_SEC  = /^1|true$/i.test(process.env.REQUIRE_SECRET || "");
const REDIS_BASE   = (process.env.UPSTASH_REDIS_REST_URL || "").replace(/\/$/, "");
const REDIS_TOKEN  = process.env.UPSTASH_REDIS_REST_TOKEN || "";

const SHEETS_URL   = process.env.SHEETS_WEBHOOK_URL || "";
const SHEETS_SECRET= process.env.SHEETS_WEBHOOK_SECRET || "";

const OPENAI_API_KEY = process.env.OPENAI_API_KEY || "";
const OPENAI_MODEL   = process.env.OPENAI_MODEL || "gpt-4o-mini";

const NO_CHAT = "–Ø –Ω–µ –≤–µ–¥—É –ø–µ—Ä–µ–ø–∏—Å–∫—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üôå";

const A_INTERESTS = ["Backend","Graph/Neo4j","Vector/LLM","Frontend","DevOps/MLOps","Data/ETL","Product/Coordination"];
const A_STACK     = ["Python/FastAPI","PostgreSQL/SQL","Neo4j","pgvector","LangChain/LangGraph","React/TS","Docker/K8s/Linux","CI/GitHub"];
const A1 = ["–ë—ã—Å—Ç—Ä–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä—É—é","–ü—Ä–æ–µ–∫—Ç–∏—Ä—É—é –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ","–ò—Å—Å–ª–µ–¥—É—é –≥–∏–ø–æ—Ç–µ–∑—ã","–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –ª—é–¥–µ–π"];
const A2 = ["MVP –≤–∞–∂–Ω–µ–µ –∏–¥–µ–∞–ª–∞","–ü–æ–ª–∏—Ä—É—é –¥–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞"];
const A3 = ["–†–∏—Å–∫/—Å–∫–æ—Ä–æ—Å—Ç—å","–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å/–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å"];
const TIME_WINDOWS = ["–±—É–¥–Ω–∏ —É—Ç—Ä–æ","–±—É–¥–Ω–∏ –¥–µ–Ω—å","–±—É–¥–Ω–∏ –≤–µ—á–µ—Ä","–≤—ã—Ö–æ–¥–Ω—ã–µ —É—Ç—Ä–æ","–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–µ–Ω—å","–≤—ã—Ö–æ–¥–Ω—ã–µ –≤–µ—á–µ—Ä"];

/* ---------------- Redis (Upstash REST) ---------------- */
function rUrl(path){ if(!REDIS_BASE||!REDIS_TOKEN) throw new Error("Redis env missing"); return new URL(REDIS_BASE+path); }
async function rGET(path){ const r=await fetch(rUrl(path),{headers:{Authorization:`Bearer ${REDIS_TOKEN}`}}); return r.json(); }
async function rCall(path,qs){ const u=rUrl(path); if(qs) for(const[k,v]of Object.entries(qs)) u.searchParams.set(k,String(v)); const r=await fetch(u,{headers:{Authorization:`Bearer ${REDIS_TOKEN}`}}); return r.json(); }
const rSet=(k,v,qs)=> rCall(`/set/${encodeURIComponent(k)}/${encodeURIComponent(v)}`, qs);
const rGet=(k)=> rGET(`/get/${encodeURIComponent(k)}`);
const rDel=(k)=> rGET(`/del/${encodeURIComponent(k)}`);
const rIncr=async(k,ex=60)=>{ const j=await rGET(`/incr/${encodeURIComponent(k)}`); if(j.result===1) await rGET(`/expire/${encodeURIComponent(k)}/${ex}`); return j.result; };
async function seenUpdate(id){ try{ const j=await rSet(`upd:${id}`,"1",{EX:180,NX:true}); return j&&("result"in j)? j.result==="OK" : true; }catch{return true;} }
async function overRL(uid,limit=12){ try{return (await rIncr(`rl:${uid}`,60))>limit;}catch{return false;} }

function newRun(){
  return { run_id:`${Date.now().toString(36)}_${Math.random().toString(36).slice(2,8)}`, started_at:new Date().toISOString(),
    step:"consent", consent:"", name:"", interests:[], stack:[], a1:"", a2:"", a3:"",
    about:"", time_zone:"", time_windows:[], specific_slots_text:"", llm:{} };
}
async function getSess(uid){
  try{ const j=await rGet(`sess:${uid}`); if(!j?.result) return newRun();
    let s; try{s=JSON.parse(j.result);}catch{return newRun();}
    if(!Array.isArray(s.interests)) s.interests=[];
    if(!Array.isArray(s.stack)) s.stack=[];
    if(!Array.isArray(s.time_windows)) s.time_windows=[];
    if(!s.run_id) s.run_id = newRun().run_id;
    if(!s.started_at) s.started_at = new Date().toISOString();
    return s;
  }catch{ return newRun(); }
}
async function putSess(uid,s){ try{ await rSet(`sess:${uid}`,JSON.stringify(s),{EX:21600}); }catch{} }
async function delSess(uid){ try{ await rDel(`sess:${uid}`); }catch{} }

/* ---------------- Telegram API ---------------- */
async function tg(method,payload){
  const url=`https://api.telegram.org/bot${TOKEN}/${method}`;
  try{
    const res=await fetch(url,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(payload)});
    const json=await res.json(); if(!json?.ok) console.error("tg api error:",method,JSON.stringify(json).slice(0,400));
    return json;
  }catch(e){ console.error("tg network error:",method,e?.message||String(e)); return {ok:false}; }
}

/* ---------------- Body parsing ---------------- */
async function readBody(req){
  if(req.body){ try{ return typeof req.body==="string"? JSON.parse(req.body): req.body; }catch{} }
  let raw=""; for await(const ch of req){ raw+=Buffer.isBuffer(ch)? ch.toString("utf8"): String(ch); }
  try{ return JSON.parse(raw||"{}"); }catch{ return {}; }
}

/* ---------------- Keyboards ---------------- */
const kbConsent = () => ({ inline_keyboard:[
  [{text:"‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ —Å–≤—è–∑—å",callback_data:"consent_yes"},{text:"‚ùå –ù–µ —Å–µ–π—á–∞—Å",callback_data:"consent_no"}],
  [{text:"üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",callback_data:"reset_start"}]
]});
const kbContinueReset = () => ({ inline_keyboard:[[ {text:"‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",callback_data:"continue"}, {text:"üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",callback_data:"reset_start"} ]]});
const kbName = (username)=>({ inline_keyboard:[
  ...(username? [[{text:`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @${username}`,callback_data:"name_use_username"}]]: []),
  [{text:"üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",callback_data:"reset_start"}]
]});
const kbSingle = (prefix, opts)=>({ inline_keyboard: opts.map(o=>[{text:o,callback_data:`${prefix}:${o}`}]).concat([[{text:"üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",callback_data:"reset_start"}]]) });
function kbMulti(prefix,options,selected){
  const rows = options.map(o=>[{text:`${selected.includes(o)?"‚òëÔ∏è":"‚¨úÔ∏è"} ${o}`,callback_data:`${prefix}:${o}`}]);
  rows.push([{text:"–î–∞–ª—å—à–µ ‚ûú",callback_data:`${prefix}:next`}]);
  rows.push([{text:"üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",callback_data:"reset_start"}]);
  return { inline_keyboard: rows };
}
function kbTime(sess){
  const rows = [
    [{text:"TZ: Europe/Moscow",callback_data:"q7tz:Europe/Moscow"},{text:"TZ: Europe/Amsterdam",callback_data:"q7tz:Europe/Amsterdam"}],
    ...TIME_WINDOWS.map(w=>[{text:`${sess.time_windows.includes(w)?"‚òëÔ∏è":"‚¨úÔ∏è"} ${w}`,callback_data:`q7w:${w}`}]),
    [{text:"–ì–æ—Ç–æ–≤–æ ‚ûú",callback_data:"q7w:done"}],
    [{text:"üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",callback_data:"reset_start"}],
  ];
  return { inline_keyboard: rows };
}

/* ---------------- Screens ---------------- */
async function sendWelcome(chat,uid){ await tg("sendMessage",{chat_id:chat,text:"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–±–æ—Ä ¬´—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤¬ª (SQL + Graph + Vector).\n–°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –æ—Ç–≤–µ—Ç—ã: –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Å—Ç–µ–∫, —Å—Ç–∏–ª—å, –≤—Ä–µ–º—è. –û–∫?",parse_mode:"HTML",reply_markup:kbConsent()}); }
async function sendName(chat,uid,username){ await tg("sendMessage",{chat_id:chat,text:`2) –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –í–≤–µ–¥–∏ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º${username?` –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @${username}¬ª.`:""}`,parse_mode:"HTML",reply_markup:kbName(username)}); }
async function sendInterests(chat,uid,s){ await tg("sendMessage",{chat_id:chat,text:"3) –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ 3‚Äì6 –º–µ—Å.? (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ —Å–Ω–∏–º–∞–µ—Ç)",parse_mode:"HTML",reply_markup:kbMulti("q3",A_INTERESTS,s.interests||[])}); }
async function sendStack(chat,uid,s){ await tg("sendMessage",{chat_id:chat,text:"4) –£–≤–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç–µ–∫ (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä):",parse_mode:"HTML",reply_markup:kbMulti("q4",A_STACK,s.stack||[])}); }
async function sendA1(chat){ await tg("sendMessage",{chat_id:chat,text:"5/A1) –ß—Ç–æ –±–ª–∏–∂–µ –ø–æ —Å—Ç–∏–ª—é?",reply_markup:kbSingle("a1",A1)}); }
async function sendA2(chat){ await tg("sendMessage",{chat_id:chat,text:"5/A2) –ß—Ç–æ –≤–∞–∂–Ω–µ–µ?",reply_markup:kbSingle("a2",A2)}); }
async function sendA3(chat){ await tg("sendMessage",{chat_id:chat,text:"5/A3) –ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?",reply_markup:kbSingle("a3",A3)}); }
async function sendAbout(chat){ await tg("sendMessage",{chat_id:chat,text:"6) 2‚Äì5 —Å—Ç—Ä–æ–∫ –æ —Å–µ–±–µ + —Å—Å—ã–ª–∫–∏ (–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)."}); }
async function sendTime(chat, sess){ await tg("sendMessage",{chat_id:chat,text:"7) –£–∫–∞–∂–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–∫–Ω–æ–ø–∫–æ–π) –∏ —É–¥–æ–±–Ω—ã–µ –æ–∫–Ω–∞ (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä). –ó–∞—Ç–µ–º ¬´–ì–æ—Ç–æ–≤–æ¬ª.",reply_markup:kbTime(sess)}); }

/* ---------------- Finalize ---------------- */
async function runLLM(u, s){
  const base = {
    name: s.name || String(u.id),
    telegram: s.name || String(u.id),
    roles_hint: s.interests,
    stack_hint: s.stack,
    work_style_raw: {a1:s.a1,a2:s.a2,a3:s.a3},
    about: s.about,
    time_zone: s.time_zone,
    time_windows: s.time_windows,
    specific_slots_text: s.specific_slots_text
  };
  if (!OPENAI_API_KEY) {
    return {
      name: base.name, telegram: base.telegram,
      roles: (s.interests||[]).slice(0,2).map(x=>x.toLowerCase().includes("graph")?"graph":x.toLowerCase().includes("vector")?"vector":x.toLowerCase().includes("devops")?"devops":"backend"),
      stack: (s.stack||[]).slice(0,3),
      work_style: {builder:0.6,architect:0.2,researcher:0.1,operator:0.1,integrator:0.2},
      fit_score: 65, time_commitment: s.time_windows.length>=3?"11‚Äì20—á":s.time_windows.length>=2?"6‚Äì10—á":"‚â§5—á",
      time_zone: s.time_zone||"UTC", time_windows: s.time_windows,
      specific_slots_text: s.specific_slots_text || "", links: [],
      summary: "–°—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç. –ü–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞ –±—ç–∫–µ–Ω–¥/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."
    };
  }
  const SYSTEM = [
    "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-—Ä–µ–∫—Ä—É—Ç–µ—Ä. –í–µ—Ä–Ω–∏ –°–¢–†–û–ì–û JSON –ø–æ —Å—Ö–µ–º–µ:",
    '{ "name": str, "telegram": str, "roles": [...], "stack": [...],',
    '"work_style":{"builder":0-1,"architect":0-1,"researcher":0-1,"operator":0-1,"integrator":0-1},',
    '"fit_score":0-100,"time_commitment":"‚â§5—á"|"6‚Äì10—á"|"11‚Äì20—á"|">20—á","time_zone":str,',
    '"time_windows":["–±—É–¥–Ω–∏ —É—Ç—Ä–æ","–±—É–¥–Ω–∏ –¥–µ–Ω—å","–±—É–¥–Ω–∏ –≤–µ—á–µ—Ä","–≤—ã—Ö–æ–¥–Ω—ã–µ —É—Ç—Ä–æ","–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–µ–Ω—å","–≤—ã—Ö–æ–¥–Ω—ã–µ –≤–µ—á–µ—Ä"],',
    '"specific_slots_text":str,"links":[str],"summary":"2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" }',
    "–†—É–±—Ä–∏–∫–∞: —Ä–æ–ª—å/—Å—Ç–µ–∫ 35; –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å 20; –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å/—Å—Å—ã–ª–∫–∏ 15; —Å—Ç–∏–ª—å-—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 10; —à–∏—Ä–æ—Ç–∞ 10; —è—Å–Ω–æ—Å—Ç—å 10.",
    "–ü—Å–∏—Ö–æ—Ç–∏–ø—ã: builder, architect, researcher, operator, integrator.",
    "–û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ JSON."
  ].join("\n");
  const body = {
    model: OPENAI_MODEL, temperature: 0,
    response_format: { type:"json_object" },
    messages: [{role:"system",content:SYSTEM},{role:"user",content:JSON.stringify(base)}]
  };
  const r = await fetch("https://api.openai.com/v1/chat/completions", {
    method:"POST", headers:{ "content-type":"application/json","authorization":"Bearer "+OPENAI_API_KEY }, body: JSON.stringify(body)
  }).then(x=>x.json()).catch(()=>null);
  try { return JSON.parse(r.choices[0].message.content); } catch { return null; }
}

async function appendSheets(row){
  if (!SHEETS_URL || !SHEETS_SECRET) return {ok:false, skipped:true};
  const res = await fetch(SHEETS_URL, {
    method:"POST", headers:{ "content-type":"application/json" },
    body: JSON.stringify({ secret: SHEETS_SECRET, op:"append", row })
  }).then(x=>x.json()).catch(()=>({ok:false}));
  return res;
}

async function cmdDigest(chat){
  if (!SHEETS_URL || !SHEETS_SECRET) { await tg("sendMessage",{chat_id:chat,text:"/digest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Sheets writer."}); return; }
  const j = await fetch(SHEETS_URL, {
    method:"POST", headers:{ "content-type":"application/json" },
    body: JSON.stringify({ secret: SHEETS_SECRET, op:"digest" })
  }).then(x=>x.json()).catch(()=>null);
  if (j?.ok && j.digest) await tg("sendMessage",{chat_id:chat,text:j.digest,parse_mode:"Markdown"});
  else await tg("sendMessage",{chat_id:chat,text:"/digest: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞."});
}

async function finalize(chat, user, s){
  await tg("sendMessage",{chat_id:chat,text:"‚è≥ –°–µ–∫—É–Ω–¥–∞, –≥–æ—Ç–æ–≤–ª—é —Å–≤–æ–¥–∫—É‚Ä¶"});
  const llm = await runLLM(user, s) || {};
  s.llm = llm;
  const username = user.username ? "@"+user.username : String(user.id);
  const row = [
    new Date().toISOString(),
    s.run_id, s.started_at,
    username, String(user.id),
    s.consent, s.name,
    JSON.stringify(s.interests), JSON.stringify(s.stack),
    s.a1, s.a2, s.a3, s.about,
    s.time_zone, JSON.stringify(s.time_windows), s.specific_slots_text || "",
    JSON.stringify(llm),
    llm.fit_score || "",
    JSON.stringify(llm.roles || []),
    JSON.stringify(llm.stack || []),
    JSON.stringify(llm.work_style || {}),
    llm.time_commitment || "",
    JSON.stringify(llm.links || []),
    llm.summary || ""
  ];
  await appendSheets(row);
  if (ADMIN_ID) {
    const digest = `${llm.fit_score ?? "?"} ‚Äî ${(llm.name || s.name || username)} ‚Äî ${(llm.roles||[]).slice(0,2).join(",")}`;
    await tg("sendMessage",{chat_id:ADMIN_ID,text:`–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞: ${digest}`});
  }
  await tg("sendMessage",{chat_id:chat,text:"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–ø–∞—Å–∏–±–æ. –ú—ã –≤–µ—Ä–Ω—ë–º—Å—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Å–ª–æ—Ç–∞."});
  await delSess(user.id);
}

/* ---------------- Entry ---------------- */
export default async function handler(req,res){
  if(req.method!=="POST"){ res.status(200).send("OK"); return; }
  const upd = await readBody(req);
  try{
    if (upd.update_id && !(await seenUpdate(upd.update_id))) { res.status(200).send("OK"); return; }
    if (upd.message)             await onMessage(upd.message);
    else if (upd.callback_query) await onCallback(upd.callback_query);
  }catch(e){ console.error("handler error:", e?.message||String(e)); }
  res.status(200).send("OK");
}

/* ---------------- Flow helpers ---------------- */
function makeNew(){ return newRun(); }
async function resetFlow(uid,chat){
  const s = makeNew(); await putSess(uid,s);
  await tg("sendMessage",{chat_id:chat,text:"üîÅ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ ‚Äî —ç—Ç–æ –Ω–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞. –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É."});
  await sendWelcome(chat,uid);
}
async function continueFlow(uid,chat,s,username){
  if (s.step==="name")        { await sendName(chat,uid,username); return; }
  if (s.step==="interests")   { await sendInterests(chat,uid,s);   return; }
  if (s.step==="stack")       { await sendStack(chat,uid,s);       return; }
  if (s.step==="a1")          { await sendA1(chat);                return; }
  if (s.step==="a2")          { await sendA2(chat);                return; }
  if (s.step==="a3")          { await sendA3(chat);                return; }
  if (s.step==="about")       { await sendAbout(chat);             return; }
  if (s.step==="time")        { await sendTime(chat, s);           return; }
  await sendWelcome(chat,uid);
}

/* ---------------- Handlers ---------------- */
async function onMessage(m){
  const uid=m.from.id; if(await overRL(uid)) return;
  const chat=m.chat.id; const text=(m.text||"").trim();

  if (text.toLowerCase()==="/ping"){ await tg("sendMessage",{chat_id:chat,text:"pong ‚úÖ"}); return; }
  if (text.toLowerCase()==="/reset" || text.toLowerCase()==="–∑–∞–Ω–æ–≤–æ"){ await resetFlow(uid,chat); return; }
  if (text.toLowerCase()==="/digest" && String(uid)===String(ADMIN_ID)){ await cmdDigest(chat); return; }

  if (text.startsWith("/start")){
    const payload = text.split(" ").slice(1).join(" ").trim();
    const hasSecret = payload && START_SECRET && payload.includes(START_SECRET);
    if (REQUIRE_SEC && !hasSecret && String(uid)!==String(ADMIN_ID)){
      await tg("sendMessage",{chat_id:chat,text:`–ù—É–∂–µ–Ω –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞. –û—Ç–∫—Ä–æ–π —Å—Å—ã–ª–∫—É:\nhttps://t.me/rgnr_assistant_bot?start=${encodeURIComponent(START_SECRET||"INVITE")}`});
      return;
    }
    const s=await getSess(uid);
    if (s.step && s.step!=="consent"){
      await tg("sendMessage",{chat_id:chat,text:"–ê–Ω–∫–µ—Ç–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",reply_markup:kbContinueReset()});
      return;
    }
    const s2=makeNew(); await putSess(uid,s2); await sendWelcome(chat,uid); return;
  }

  const s=await getSess(uid);
  if (s.step==="name"){ s.name=text.slice(0,80); s.step="interests"; await putSess(uid,s); await sendInterests(chat,uid,s); return; }
  if (s.step==="about"){ s.about=text.slice(0,1200); s.step="time"; await putSess(uid,s); await sendTime(chat,s); return; }
  if (s.step==="time" && s.time_zone && s.time_windows.length){ s.specific_slots_text=text.slice(0,300); await putSess(uid,s); await finalize(chat,m.from,s); return; }

  await tg("sendMessage",{chat_id:chat,text:NO_CHAT,reply_markup:kbContinueReset()});
}

async function onCallback(q){
  const uid=q.from.id; if(await overRL(uid)) return;
  const chat=q.message.chat.id; const mid=q.message.message_id; const data=q.data||"";
  try{ await tg("answerCallbackQuery",{callback_query_id:q.id}); }catch{}
  let s=await getSess(uid);

  if (data==="continue"){ await continueFlow(uid,chat,s,q.from.username); return; }
  if (data==="reset_start"){ await resetFlow(uid,chat); return; }

  if (data==="consent_yes"){ if(s.step!=="consent") return; s.consent="yes"; s.step="name"; await putSess(uid,s);
    try{ await tg("editMessageText",{chat_id:chat,message_id:mid,text:"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Å–≤—è–∑—å.",parse_mode:"HTML"}); }catch{}
    await sendName(chat,uid,q.from.username); return; }
  if (data==="consent_no"){ if(s.step!=="consent") return; try{ await tg("editMessageText",{chat_id:chat,message_id:mid,text:"–û–∫. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî /start"}); }catch{} await delSess(uid); return; }

  if (data==="name_use_username"){ if(s.step!=="name") return; s.name=q.from.username?`@${q.from.username}`:String(uid); s.step="interests"; await putSess(uid,s); await sendInterests(chat,uid,s); return; }

  if (data.startsWith("q3:")){
    if (s.step!=="interests") return;
    const opt=data.split(":")[1];
    if (opt==="next"){ s.step="stack"; await putSess(uid,s); await sendStack(chat,uid,s); return; }
    toggle(s.interests,opt); await putSess(uid,s);
    await tg("editMessageReplyMarkup",{chat_id:chat,message_id:mid,reply_markup:kbMulti("q3",A_INTERESTS,s.interests)}); return;
  }

  if (data.startsWith("q4:")){
    if (s.step!=="stack") return;
    const opt=data.split(":")[1];
    if (opt==="next"){ s.step="a1"; await putSess(uid,s); await sendA1(chat); return; }
    toggle(s.stack,opt); await putSess(uid,s);
    await tg("editMessageReplyMarkup",{chat_id:chat,message_id:mid,reply_markup:kbMulti("q4",A_STACK,s.stack)}); return;
  }

  if (data.startsWith("a1:")){ if (s.step!=="a1") return; s.a1=data.split(":")[1]; s.step="a2"; await putSess(uid,s); await sendA2(chat); return; }
  if (data.startsWith("a2:")){ if (s.step!=="a2") return; s.a2=data.split(":")[1]; s.step="a3"; await putSess(uid,s); await sendA3(chat); return; }
  if (data.startsWith("a3:")){ if (s.step!=="a3") return; s.a3=data.split(":")[1]; s.step="about"; await putSess(uid,s); await sendAbout(chat); return; }

  if (data.startsWith("q7w:")){
    if (s.step!=="time") return;
    const opt=data.split(":")[1];
    if (opt==="done"){
      if (!s.time_zone || !s.time_windows.length){ await tg("sendMessage",{chat_id:chat,text:"–£–∫–∞–∂–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏."}); return; }
      await tg("sendMessage",{chat_id:chat,text:"–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –Ω–∞–ø–∏—à–∏ 2‚Äì3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª–æ—Ç–∞ (–∏–ª–∏ ¬´-¬ª –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)."}); return;
    }
    toggle(s.time_windows,opt); await putSess(uid,s);
    await tg("editMessageReplyMarkup",{chat_id:chat,message_id:mid,reply_markup:kbTime(s)}); return;
  }
  if (data.startsWith("q7tz:")){ if (s.step!=="time") return; s.time_zone=data.split(":")[1]; await putSess(uid,s); await tg("editMessageReplyMarkup",{chat_id:chat,message_id:mid,reply_markup:kbTime(s)}); return; }
}

/* ---------------- Utils ---------------- */
function toggle(arr,val){ const i=arr.indexOf(val); if(i>=0) arr.splice(i,1); else arr.push(val); }
