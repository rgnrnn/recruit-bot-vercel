/**
 * api/telegram.js ‚Äî Vercel webhook –¥–ª—è Telegram (Node 20, ESM)
 * Q1 (—Å–æ–≥–ª–∞—Å–∏–µ) ‚Üí Q2 (–∏–º—è) ‚Üí Q3 (–∏–Ω—Ç–µ—Ä–µ—Å—ã, –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä) ‚Üí Q4 (—Å—Ç–µ–∫, –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä).
 * –ê–Ω—Ç–∏-–¥—É–±–ª–∏ –ø–æ update_id —á–µ—Ä–µ–∑ Upstash Redis. –ù–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–∞, –ª–æ–≥–∏, rate-limit.
 *
 * ENV (Vercel ‚Üí Project ‚Üí Settings ‚Üí Environment Variables):
 * TELEGRAM_BOT_TOKEN        ‚Äî —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
 * ADMIN_CHAT_ID             ‚Äî id –∞–¥–º–∏–Ω–∞ (–æ–ø—Ü.)
 * START_SECRET              ‚Äî deep-link —Å–µ–∫—Ä–µ—Ç (–Ω–∞–ø—Ä. INVITE)
 * REQUIRE_SECRET            ‚Äî "1"/"true" —á—Ç–æ–±—ã —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç —Å—Ç—Ä–æ–≥–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï —Ç—Ä–µ–±—É–µ–º)
 * UPSTASH_REDIS_REST_URL    ‚Äî https://*.upstash.io
 * UPSTASH_REDIS_REST_TOKEN  ‚Äî <token>
 */

const TOKEN        = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_ID     = process.env.ADMIN_CHAT_ID || "";
const START_SECRET = process.env.START_SECRET || "";
const REQUIRE_SEC  = /^1|true$/i.test(process.env.REQUIRE_SECRET || "");
const REDIS_BASE   = (process.env.UPSTASH_REDIS_REST_URL || "").replace(/\/$/, "");
const REDIS_TOKEN  = process.env.UPSTASH_REDIS_REST_TOKEN || "";

const NO_CHAT = "–Ø –Ω–µ –≤–µ–¥—É –ø–µ—Ä–µ–ø–∏—Å–∫—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üôå";

/* ---------- –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è Q3/Q4 ---------- */
const A_INTERESTS = [
  "Backend","Graph/Neo4j","Vector/LLM","Frontend",
  "DevOps/MLOps","Data/ETL","Product/Coordination"
];
const A_STACK = [
  "Python/FastAPI","PostgreSQL/SQL","Neo4j","pgvector",
  "LangChain/LangGraph","React/TS","Docker/K8s/Linux","CI/GitHub"
];

/* -------------------- Redis (Upstash REST) -------------------- */

function rUrl(path) {
  if (!REDIS_BASE || !REDIS_TOKEN) throw new Error("Redis env missing");
  return new URL(REDIS_BASE + path);
}
async function rGET(path) {
  const res = await fetch(rUrl(path), { headers: { Authorization: `Bearer ${REDIS_TOKEN}` } });
  return res.json();
}
async function rCall(path, qs = {}) {
  const url = rUrl(path);
  Object.entries(qs).forEach(([k, v]) => url.searchParams.set(k, String(v)));
  const res = await fetch(url, { headers: { Authorization: `Bearer ${REDIS_TOKEN}` } });
  return res.json();
}
const rSet  = (k, v, qs)=> rCall(`/set/${encodeURIComponent(k)}/${encodeURIComponent(v)}`, qs);
const rGet  = (k)=> rGET(`/get/${encodeURIComponent(k)}`);
const rDel  = (k)=> rGET(`/del/${encodeURIComponent(k)}`);
const rIncr = async (k, ex = 60) => {
  const j = await rGET(`/incr/${encodeURIComponent(k)}`);
  if (j.result === 1) await rGET(`/expire/${encodeURIComponent(k)}/${ex}`);
  return j.result;
};

/** –î–µ–¥—É–ø: true = –ø–µ—Ä–≤—ã–π —Ä–∞–∑; false = —è–≤–Ω—ã–π –¥—É–±–ª—å (NX –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª).
 * –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ Redis ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true (–Ω–µ —Ç–µ—Ä—è–µ–º –∞–ø–¥–µ–π—Ç—ã). */
async function seenUpdate(update_id) {
  try {
    const j = await rSet(`upd:${update_id}`, "1", { EX: 180, NX: true });
    if (j && Object.prototype.hasOwnProperty.call(j, "result")) {
      return j.result === "OK";
    }
    return true;
  } catch (e) {
    console.warn("seenUpdate fallback (redis err):", e?.message || String(e));
    return true;
  }
}
async function overRL(uid, limit = 12) {
  try { return (await rIncr(`rl:${uid}`, 60)) > limit; }
  catch { return false; }
}
async function getSess(uid) {
  try {
    const j = await rGet(`sess:${uid}`);
    const base = { step:"consent", consent:"", name:"", interests:[], stack:[] };
    if (!j?.result) return base;
    try {
      const s = JSON.parse(j.result);
      if (!Array.isArray(s.interests)) s.interests = [];
      if (!Array.isArray(s.stack)) s.stack = [];
      return Object.assign(base, s);
    } catch { return base; }
  } catch { return { step:"consent", consent:"", name:"", interests:[], stack:[] }; }
}
async function putSess(uid, s) { try { await rSet(`sess:${uid}`, JSON.stringify(s), { EX: 21600 }); } catch {} }
async function delSess(uid)     { try { await rDel(`sess:${uid}`); } catch {} }

/* -------------------- Telegram API -------------------- */

async function tg(method, payload) {
  const url = `https://api.telegram.org/bot${TOKEN}/${method}`;
  let json;
  try {
    const res = await fetch(url, {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify(payload),
    });
    json = await res.json();
  } catch (e) {
    console.error("tg network error:", method, e?.message || String(e));
    return { ok: false, error: "network" };
  }
  if (!json?.ok) console.error("tg api error:", method, JSON.stringify(json).slice(0, 500));
  return json;
}

/* -------------------- Body parsing -------------------- */

async function readBody(req) {
  if (req.body) {
    try { return typeof req.body === "string" ? JSON.parse(req.body) : req.body; }
    catch { /* fallthrough */ }
  }
  let raw = "";
  for await (const chunk of req) raw += Buffer.isBuffer(chunk) ? chunk.toString("utf8") : String(chunk);
  try { return JSON.parse(raw || "{}"); } catch { return {}; }
}

/* -------------------- UI helpers -------------------- */

function consentKeyboard() {
  return JSON.stringify({
    inline_keyboard: [[
      { text:"‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ —Å–≤—è–∑—å", callback_data:"consent_yes" },
      { text:"‚ùå –ù–µ —Å–µ–π—á–∞—Å",        callback_data:"consent_no"  }
    ]]
  });
}
function multiKb(prefix, options, selected) {
  const rows = options.map(o => ([
    { text: `${selected.includes(o) ? "‚òëÔ∏è" : "‚¨úÔ∏è"} ${o}`, callback_data: `${prefix}:${o}` }
  ]));
  rows.push([{ text: "–î–∞–ª—å—à–µ ‚ûú", callback_data: `${prefix}:next` }]);
  return JSON.stringify({ inline_keyboard: rows });
}

async function sendWelcome(chat, uid) {
  console.log("sendWelcome", { uid, chat });
  await tg("sendMessage", {
    chat_id: chat,
    text: "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–±–æ—Ä ¬´—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤¬ª (SQL + Graph + Vector).\n–°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –æ—Ç–≤–µ—Ç—ã: –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Å—Ç–µ–∫, —Å—Ç–∏–ª—å, –≤—Ä–µ–º—è. –û–∫?",
    parse_mode: "HTML",
    reply_markup: consentKeyboard(),
  });
}
async function sendNamePrompt(chat, uid, username) {
  console.log("sendNamePrompt", { uid, chat, username });
  const btn = username ? { text:`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @${username}`, callback_data:"name_use_username" } : null;
  const rm  = btn ? JSON.stringify({ inline_keyboard: [[btn]] }) : undefined;
  await tg("sendMessage", {
    chat_id: chat,
    text: "2) –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –í–≤–µ–¥–∏ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º" + (username?` –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @${username}¬ª.`:""),
    parse_mode: "HTML",
    reply_markup: rm,
  });
}
async function sendInterestsPrompt(chat, uid, s) {
  console.log("sendInterests", { uid });
  await tg("sendMessage", {
    chat_id: chat,
    text: "3) –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ 3‚Äì6 –º–µ—Å.? (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ —Å–Ω–∏–º–∞–µ—Ç)",
    parse_mode: "HTML",
    reply_markup: multiKb("q3", A_INTERESTS, s.interests || []),
  });
}
async fun
